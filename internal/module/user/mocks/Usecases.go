// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import request "user-service/internal/module/user/models/request"
import response "user-service/internal/module/user/models/response"

// Usecases is an autogenerated mock type for the Usecases type
type Usecases struct {
	mock.Mock
}

// CreateProfile provides a mock function with given fields: ctx, payload
func (_m *Usecases) CreateProfile(ctx context.Context, payload *request.CreateProfile) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.CreateProfile) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProfile provides a mock function with given fields: ctx, payload
func (_m *Usecases) GetProfile(ctx context.Context, payload *request.GetProfile) (response.GetProfileResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 response.GetProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *request.GetProfile) response.GetProfileResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(response.GetProfileResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *request.GetProfile) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, payload
func (_m *Usecases) GetUser(ctx context.Context, payload *request.GetUser) (response.GetUserResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 response.GetUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *request.GetUser) response.GetUserResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(response.GetUserResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *request.GetUser) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, payload
func (_m *Usecases) Login(ctx context.Context, payload *request.Login) (response.LoginResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 response.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, *request.Login) response.LoginResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(response.LoginResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *request.Login) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, payload
func (_m *Usecases) Register(ctx context.Context, payload *request.Register) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.Register) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: ctx, payload
func (_m *Usecases) UpdateProfile(ctx context.Context, payload *request.UpdateProfile) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.UpdateProfile) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, payload
func (_m *Usecases) UpdateUser(ctx context.Context, payload *request.UpdateUser) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.UpdateUser) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateToken provides a mock function with given fields: ctx, payload
func (_m *Usecases) ValidateToken(ctx context.Context, payload *request.ValidateToken) (response.ValidateToken, error) {
	ret := _m.Called(ctx, payload)

	var r0 response.ValidateToken
	if rf, ok := ret.Get(0).(func(context.Context, *request.ValidateToken) response.ValidateToken); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(response.ValidateToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *request.ValidateToken) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
