// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import entity "user-service/internal/module/user/models/entity"
import mock "github.com/stretchr/testify/mock"

// Repositories is an autogenerated mock type for the Repositories type
type Repositories struct {
	mock.Mock
}

// FindProfileByUserID provides a mock function with given fields: ctx, userID
func (_m *Repositories) FindProfileByUserID(ctx context.Context, userID int) (entity.Profile, error) {
	ret := _m.Called(ctx, userID)

	var r0 entity.Profile
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.Profile); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(entity.Profile)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByEmail provides a mock function with given fields: ctx, email
func (_m *Repositories) FindUserByEmail(ctx context.Context, email string) (entity.User, error) {
	ret := _m.Called(ctx, email)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByID provides a mock function with given fields: ctx, id
func (_m *Repositories) FindUserByID(ctx context.Context, id int) (entity.User, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertProfile provides a mock function with given fields: ctx, payload
func (_m *Repositories) UpsertProfile(ctx context.Context, payload *entity.Profile) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Profile) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertUser provides a mock function with given fields: ctx, payload
func (_m *Repositories) UpsertUser(ctx context.Context, payload *entity.User) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
