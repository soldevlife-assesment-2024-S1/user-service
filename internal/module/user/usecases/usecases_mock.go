// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=usecases_mock.go -package=usecases
//

// Package usecases is a generated GoMock package.
package usecases

import (
	context "context"
	reflect "reflect"
	request "user-service/internal/module/user/models/request"
	response "user-service/internal/module/user/models/response"

	gomock "go.uber.org/mock/gomock"
)

// MockUsecases is a mock of Usecases interface.
type MockUsecases struct {
	ctrl     *gomock.Controller
	recorder *MockUsecasesMockRecorder
}

// MockUsecasesMockRecorder is the mock recorder for MockUsecases.
type MockUsecasesMockRecorder struct {
	mock *MockUsecases
}

// NewMockUsecases creates a new mock instance.
func NewMockUsecases(ctrl *gomock.Controller) *MockUsecases {
	mock := &MockUsecases{ctrl: ctrl}
	mock.recorder = &MockUsecasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecases) EXPECT() *MockUsecasesMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method.
func (m *MockUsecases) CreateProfile(ctx context.Context, payload *request.CreateProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockUsecasesMockRecorder) CreateProfile(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockUsecases)(nil).CreateProfile), ctx, payload)
}

// GetProfile mocks base method.
func (m *MockUsecases) GetProfile(ctx context.Context, payload *request.GetProfile) (response.GetProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, payload)
	ret0, _ := ret[0].(response.GetProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockUsecasesMockRecorder) GetProfile(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockUsecases)(nil).GetProfile), ctx, payload)
}

// GetUser mocks base method.
func (m *MockUsecases) GetUser(ctx context.Context, payload *request.GetUser) (response.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, payload)
	ret0, _ := ret[0].(response.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUsecasesMockRecorder) GetUser(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUsecases)(nil).GetUser), ctx, payload)
}

// Login mocks base method.
func (m *MockUsecases) Login(ctx context.Context, payload *request.Login) (response.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, payload)
	ret0, _ := ret[0].(response.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUsecasesMockRecorder) Login(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUsecases)(nil).Login), ctx, payload)
}

// Register mocks base method.
func (m *MockUsecases) Register(ctx context.Context, payload *request.Register) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUsecasesMockRecorder) Register(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUsecases)(nil).Register), ctx, payload)
}

// UpdateProfile mocks base method.
func (m *MockUsecases) UpdateProfile(ctx context.Context, payload *request.UpdateProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUsecasesMockRecorder) UpdateProfile(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUsecases)(nil).UpdateProfile), ctx, payload)
}

// UpdateUser mocks base method.
func (m *MockUsecases) UpdateUser(ctx context.Context, payload *request.UpdateUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUsecasesMockRecorder) UpdateUser(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUsecases)(nil).UpdateUser), ctx, payload)
}

// ValidateToken mocks base method.
func (m *MockUsecases) ValidateToken(ctx context.Context, payload *request.ValidateToken) (response.ValidateToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, payload)
	ret0, _ := ret[0].(response.ValidateToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockUsecasesMockRecorder) ValidateToken(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockUsecases)(nil).ValidateToken), ctx, payload)
}
